{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7deb0cea_601937fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-06T18:40:39Z",
      "side": 1,
      "message": "James, Julio: Please take a preliminary look at this CL and see if it is what you have in mind. Thanks!",
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20851029_b498b495",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1673,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-06T19:27:12Z",
      "side": 1,
      "message": "Does `aomenc` or `libavif` need to be modified to reflect this side effect? (e.g. by scanning and parsing the tune key/value pair before others).",
      "range": {
        "startLine": 1672,
        "startChar": 0,
        "endLine": 1673,
        "endChar": 68
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4486deff_4a8cc660",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1673,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-06T22:48:13Z",
      "side": 1,
      "message": "aomenc and libavif should honor the order of its command-line options faithfully. So the burden is on the users to set the options in the right order.\n\nI have switched to documenting the side effects as we decided in our meeting with Frank today.",
      "parentUuid": "20851029_b498b495",
      "range": {
        "startLine": 1672,
        "startChar": 0,
        "endLine": 1673,
        "endChar": 68
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b386d17f_1c3226aa",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1689,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-06T19:06:20Z",
      "side": 1,
      "message": "Do we need this enum entry to be defined as a compile-time option? I noticed other parts of the code assume the entry is present, so for consistency either this `#define` should be removed, or the other places where the entry is used should also have the `#define`.",
      "range": {
        "startLine": 1688,
        "startChar": 0,
        "endLine": 1689,
        "endChar": 28
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3357737_71bdfbe5",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1689,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-11-06T19:33:24Z",
      "side": 1,
      "message": "\u003e Do we need this enum entry to be defined as a compile-time option? I noticed other parts of the code assume the entry is present, so for consistency either this `#define` should be removed, or the other places where the entry is used should also have the `#define`.\n\nI believe this is for users of the library to be able to detect the presence of this value before using it. This would allow libavif to be compiled against older versions of libaom.",
      "parentUuid": "b386d17f_1c3226aa",
      "range": {
        "startLine": 1688,
        "startChar": 0,
        "endLine": 1689,
        "endChar": 28
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49a879ac_29835651",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1689,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-06T20:32:49Z",
      "side": 1,
      "message": "Yeah, Wan-Teh just explained it to me on a video call. Makes sense.",
      "parentUuid": "b3357737_71bdfbe5",
      "range": {
        "startLine": 1688,
        "startChar": 0,
        "endLine": 1689,
        "endChar": 28
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83e734dc_710c7281",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1689,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-06T21:01:55Z",
      "side": 1,
      "message": "I can give a three-part answer.\n\n1. Some constants are defined as macros, e.g., `AOM_USAGE_ALL_INTRA`. So we can use the C preprocessor `defined` operator to check for the presence of these macros.\n\n2. For each codec control ID `FOO` (which is an enum constant), we also define a macro `AOM_CTRL_FOO`. We can test that macro for the presence of the codec control ID.\n\n3. For any other constant defined as an enum constant, we will need to add a corresponding feature-detection macro. Right now there is only one: `AOM_HAVE_IMG_FMT_NV12`. So `AOM_HAVE_TUNE_SSIMULACRA2` will be the second one.\n\nNote: If libaom has version number macros, we can also detect a feature at compile time by checking the version number macros. But we haven\u0027t added version number macros yet (https://crbug.com/aomedia/42301696).",
      "parentUuid": "b3357737_71bdfbe5",
      "range": {
        "startLine": 1688,
        "startChar": 0,
        "endLine": 1689,
        "endChar": 28
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0295268f_e148dfeb",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1689,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-06T22:03:26Z",
      "side": 1,
      "message": "Julio: I wonder if I misunderstood your question. The `AOM_HAVE_TUNE_SSIMULACRA2` feature detection macro (note that its name is different from the `AOM_TUNE_SSIMULACRA2` enum) is intended for clients of libaom that need to build their code against multiple versions of libaom. libaom itself doesn\u0027t check the `AOM_HAVE_TUNE_SSIMULACRA2` macro, because it knows the `AOM_TUNE_SSIMULACRA2` enum is present.",
      "parentUuid": "83e734dc_710c7281",
      "range": {
        "startLine": 1688,
        "startChar": 0,
        "endLine": 1689,
        "endChar": 28
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93ad4cec_88ec6cb9",
        "filename": "aom/aomcx.h",
        "patchSetId": 2
      },
      "lineNbr": 1689,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-06T22:23:37Z",
      "side": 1,
      "message": "Yeah, I was wondering about the detection macro itself. The explanation regarding compat with multiple versions makes sense. Appreciate the detailed explanation Wan-Teh.",
      "parentUuid": "0295268f_e148dfeb",
      "range": {
        "startLine": 1688,
        "startChar": 0,
        "endLine": 1689,
        "endChar": 28
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b48f99e_d85f65f3",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 4114,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-06T19:06:20Z",
      "side": 1,
      "message": "This section of the code looks similar to the addition in line 1790. I\u0027d extract this into a function so the checks and defaults are defined in one place.",
      "range": {
        "startLine": 4107,
        "startChar": 0,
        "endLine": 4114,
        "endChar": 5
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b42cae3_5a646a8c",
        "filename": "av1/av1_cx_iface.c",
        "patchSetId": 2
      },
      "lineNbr": 4114,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-06T22:48:13Z",
      "side": 1,
      "message": "Done. Extracted the common code into the `handle_tuning()` function.",
      "parentUuid": "4b48f99e_d85f65f3",
      "range": {
        "startLine": 4107,
        "startChar": 0,
        "endLine": 4114,
        "endChar": 5
      },
      "revId": "49b044415e48b6d318bccbb0d07d809396f18792",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}