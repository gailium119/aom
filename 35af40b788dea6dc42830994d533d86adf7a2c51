{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b25b9e2e_67a307a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Add a Bug: line to link to your tracking bug?",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e184a203_0e769276",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b25b9e2e_67a307a2",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5280274f_cc3bee4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Jingning: Please review. The actual changes are in only two files: rd.c and txb_rdopt.c. Please at least check the changes to txb_rdopt.c. Thanks!",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db2ec2f8_d44d1f83",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Could you document how you came up with this equation?",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edfef9da_ee42007b",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db2ec2f8_d44d1f83",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "387bf4ac_0b925253",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "IMPORTANT: Cast to `int64_t`, not `int`. See the code above.\n\nUnless `rdmult` is very close to `INT64_MAX`, we can also just do integer arithmetic:\n\n```\n    rdmult \u003d rdmult * weight / 128;\n```",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21eb5875_5f3c905b",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 411,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Good eye, changed cast to `int64_t`.\n\nIf it\u0027s okay, I\u0027ll keep the calculation in `double` precision, to keep it in line with the other frame type adjustments above.",
      "parentUuid": "387bf4ac_0b925253",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28089a3a_a3e286b2",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 441,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Nit: I wonder if we should make sure `rdmult` is \u003c\u003d `INT_MAX` before casting to int, as we do in line 422.",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21b89ece_0065ca68",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 441,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "I think it makes sense to guard it in a similar way. A pre-scaled `rdmult` that it\u0027s below `INT_MAX` can potentially overflow once scaled by `rd_layer_depth_factor[]`, where its factors are always over unity, and the ARF boost can only make `rdmult` even larger.",
      "parentUuid": "28089a3a_a3e286b2",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef1a3dcb_6a77491b",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 496,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Nit: Remove the `int` cast. `av1_compute_rd_mult()` returns an `int`.",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afa44ded_c1006487",
        "filename": "av1/encoder/rd.c",
        "patchSetId": 3
      },
      "lineNbr": 496,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "In this case, the expression is casting (`av1_compute_rd_mult() / beta`), where `beta` is a `double`, so the explicit cast to `int` is needed to avoid an implicit conversion compiler warning.",
      "parentUuid": "ef1a3dcb_6a77491b",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "700bae9f_07a5c65e",
        "filename": "av1/encoder/rd.h",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Nit: I suggest \"visual tuning metric\". Copied from the following comment in av1/encoder/encoder.h:\n\n```\n  // Indicates the visual tuning metric.\n  aom_tune_metric tuning;\n```\n\nand the following comment in aom/aomcx.h:\n\n```\n  /*!\\brief Codec control function to set visual tuning, aom_tune_metric (int)\n   * parameter\n   *\n   * The default is AOM_TUNE_PSNR.\n   */\n  AOME_SET_TUNING \u003d AOME_SET_ARNR_STRENGTH + 2,  // 24\n```",
      "range": {
        "startLine": 235,
        "startChar": 36,
        "endLine": 235,
        "endChar": 49
      },
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3b7499_6e186d26",
        "filename": "av1/encoder/rd.h",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "700bae9f_07a5c65e",
      "range": {
        "startLine": 235,
        "startChar": 36,
        "endLine": 235,
        "endChar": 49
      },
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d3a14d8_be66270f",
        "filename": "av1/encoder/tpl_model.c",
        "patchSetId": 3
      },
      "lineNbr": 1379,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Remove the `int` cast.",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dd9de4b_0b6ff412",
        "filename": "av1/encoder/tpl_model.c",
        "patchSetId": 3
      },
      "lineNbr": 1379,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9d3a14d8_be66270f",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39079987_6615fda3",
        "filename": "av1/encoder/tpl_model.c",
        "patchSetId": 3
      },
      "lineNbr": 1383,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-11-19T21:29:17Z",
      "side": 1,
      "message": "Does AOM_TUNE_SSIMULACRA2 only work for all intra mode?\nThe TPL model is inter only encoder model. It can not be all intra mode.\n\nIf tune AOM_TUNE_SSIMULACRA2 is for all intra only, we should make sure that AOM_TUNE_SSIMULACRA2 is not passed to this function here.",
      "range": {
        "startLine": 1383,
        "startChar": 38,
        "endLine": 1383,
        "endChar": 63
      },
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c0383b4_2f928d9d",
        "filename": "av1/encoder/tpl_model.c",
        "patchSetId": 3
      },
      "lineNbr": 1383,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T22:14:53Z",
      "side": 1,
      "message": "Currently, `AOM_TUNE_SSIMULACRA2` does indeed only work for all intra mode (and expected to stay that way at least over the near future).\n\nIf we\u0027re worried about the TPL model having to worry about knowing the tuning before (what `av1_compute_rd_mult()` takes a decision on, not whether it\u0027s using all intra mode, in this particular case), I could provide an overload of the function that assumes no `rdmult` tweaks are needed just for TPL.\n\nAlternatively, I could modify `av1_compute_rd_mult()` so it passes a boolean (e.g. `bool bias_rdo`) instead, and have all TPL calls pass in `false`. But this leaks an implementation detail to its callers, so this suggestion isn\u0027t 100% tight either.\n\nWhat do you think?",
      "parentUuid": "39079987_6615fda3",
      "range": {
        "startLine": 1383,
        "startChar": 38,
        "endLine": 1383,
        "endChar": 63
      },
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc88a38_6a67dbfd",
        "filename": "av1/encoder/tpl_model.c",
        "patchSetId": 3
      },
      "lineNbr": 1383,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-11-19T22:29:45Z",
      "side": 1,
      "message": "I think there is an easier way.\nWe can add an assertion here and document TPL be in all intra mode. For example:\n\nassert(cpi-\u003eoxcf.tune_cfg.tuning !\u003d AOM_TUNE_SSIMULACRA2 \u0026\u0026 cpi-\u003eoxcf.mode !\u003d ALLINTRA);",
      "parentUuid": "6c0383b4_2f928d9d",
      "range": {
        "startLine": 1383,
        "startChar": 38,
        "endLine": 1383,
        "endChar": 63
      },
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8b0e89c_2668d85e",
        "filename": "av1/encoder/tpl_model.c",
        "patchSetId": 3
      },
      "lineNbr": 1383,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Done, let me know if the check looks good.",
      "parentUuid": "dcc88a38_6a67dbfd",
      "range": {
        "startLine": 1383,
        "startChar": 38,
        "endLine": 1383,
        "endChar": 63
      },
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f56be3c_ae6bca1a",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "Jingning, Cheng: Could you take a look at the changes to this file?",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24676ccd_1b1c91c6",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 5022
      },
      "writtenOn": "2024-11-19T21:16:15Z",
      "side": 1,
      "message": "This will more likely move the operating points along the RD curve towards higher bit-rate side.\n\nIt really just depends on the RD curve characteristics associated with the metric itself.\n\nI am okay with the change as long as it doesn\u0027t alter the current coding stats.",
      "parentUuid": "4f56be3c_ae6bca1a",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68e69f50_735c6ae7",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-11-19T21:29:17Z",
      "side": 1,
      "message": "I am a little confused by the change.\nIn rd.c, this CL attempts to increase rdmult.\nBut here it reduces rdmult by increasing rshift.\n\nCan you explain more on the opposite trend?",
      "parentUuid": "24676ccd_1b1c91c6",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aaf67cd_904befa0",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T21:47:56Z",
      "side": 1,
      "message": "Sure thing, the two changes were counterintuitive for me at first too, but they make sense after some analysis in aomanalyzer:\n\n1. The change in rd.c that increases rdmult has the effect of biasing RDO decisions towards picking transform types/sizes/partitions that lie on the lower bitrate side. The main side effect is that the encoder ends up picking the next largest transforms slightly more often (e.g. one 16x16 block instead of four 8x8 blocks).\n\n2. The trellis change then acts as a \"counterweight\" to the decrease in bitrate expenditure by 1., and biases the encoder towards keeping more coefficients on average (from the larger blocks due to 1.), increasing bitrate.\n\nEach change in isolation doesn\u0027t really make a dent on image quality, but when both are combined, bitrate allocation is modified between blocks/coefficients in a way that slightly increases overall quality (mostly in texture detail preservation), once file sizes are normalized.",
      "parentUuid": "68e69f50_735c6ae7",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0695513_ea3eb61f",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-11-19T22:29:45Z",
      "side": 1,
      "message": "Thanks for the explanation.\n\nThe explanation of 1 and 2 makes perfect sense to me.\nYou also mentioned that either of them do not make much change on image quality. But a combination works. This observation is interesting. \n\nCould you please put the comment around rshift so that we know the change is a joint effect? Thanks.",
      "parentUuid": "6aaf67cd_904befa0",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f130aa2_93c31a7d",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 342,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Sounds good, I like that idea.",
      "parentUuid": "b0695513_ea3eb61f",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df089711_a913d7fd",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 347,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-19T21:08:30Z",
      "side": 1,
      "message": "IMPORTANT: The 2 here looks like the rounding term for `rshift` of 2.\n\ngit history supports this. The code originally looked like `(... + 2) \u003e\u003e 2`. In https://aomedia-review.googlesource.com/c/aom/+/60901, the right shift amount was changed to a complicated expression, but the rounding term was not updated. That complicated expression eventually became `rshift`.\n\nSo, we should replace the 2 by `(1 \u003c\u003c rshift) \u003e\u003e 1`. Better to store it in a variable named `rounding`. There is actually a macro that does right shift with rounding in libaom...",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffb61e55_79294ddf",
        "filename": "av1/encoder/txb_rdopt.c",
        "patchSetId": 3
      },
      "lineNbr": 347,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-19T23:49:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df089711_a913d7fd",
      "revId": "35af40b788dea6dc42830994d533d86adf7a2c51",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}