{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "112d69fc_00effb3e",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T19:48:52Z",
      "side": 1,
      "message": "Nit: Delete this? I don\u0027t see anything in this file that requires \u003cstdlib.h\u003e.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc5fd281_77276b7f",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "112d69fc_00effb3e",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84e765f7_cb9391db",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T19:48:52Z",
      "side": 1,
      "message": "Replace this with \"av1/common/quant_common.h\".\n\n\"av1/common/quant_common.h\" declares the `aom_get_qmlevel()` and `aom_get_qmlevel_allintra()` functions and defines the `DEFAULT_QM_*` macros used in this file.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bc15c95_938783b0",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84e765f7_cb9391db",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcf9d5b0_ad96bd34",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T19:48:52Z",
      "side": 1,
      "message": "Nit: `ASSERT_EQ` failures are fatal and abort the test, while `EXPECT_EQ` failures are not fatal and the test will keep executing.\n\nFor independent checks, it is often more appropriate to use `EXPECT_EQ`, because it allows us to run all the checks and see which ones fail at once.\n\nI think all the `ASSERT_*` in this file can be replaced by `EXPECT_*`.\n\nNote: Here is an example of a case where `ASSERT_*` is appropriate:\n\nSuppose you want to check if all the elements in an array are zero.\n\nWe first check if the array size is the expected value. And then we check if each array element is equal to 0 in a for loop.\n\nThe check for array size should use `ASSERT_EQ`, because if this check fails, the for loop may go beyond the end of the array.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8e2ecb0_5de8cead",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Thanks for the tip! `EXPECT_*` does make more sense here so I replaced every instance with it.",
      "parentUuid": "bcf9d5b0_ad96bd34",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b50e544_947fbb53",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T20:02:17Z",
      "side": 1,
      "message": "Nit/optional: I don\u0027t understand what it means for a QM to be steep or flat (see line 85 below). No need to explain more if this is common knowledge to people familiar with quantization matrices.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15e37b68_9fa8a749",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T20:02:17Z",
      "side": 1,
      "message": "Nit: add \"QM\" before \"levels\". Make the same change to line 85.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa2f24bd_6c31faa9",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15e37b68_9fa8a749",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f4a4bb3_18cc5ee1",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Yeah, this remark makes sense for people who are familiar with QMs.\n\nBut basically: the \u0027steeper\u0027 the QM, the larger the quantization step size increase there is as coefficients go from lower frequency to higher frequency.",
      "parentUuid": "2b50e544_947fbb53",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aafc0b1b_b75407d2",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T20:02:17Z",
      "side": 1,
      "message": "Optional: It would be good to add a comment to `aom_get_qmlevel()` in av1/common/quant_common.h to point out that it is an increasing function in `qindex`.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cafac7c6_ac926a6b",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aafc0b1b_b75407d2",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0300db1_233c6a57",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T19:48:52Z",
      "side": 1,
      "message": "IMPORTANT: This test is named \"Regular\", but it starts to call `aom_get_qmlevel_allintra()` from this point on. Is this a copy-and-paste-error?",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "426920aa_b3936e78",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Good catch! This was indeed a copy-and-paste error.\n\nUnlike QM scaling on qindex, where the two formulas are opposite of each other, forced min and max QM values have the same guarantees for both so that\u0027s why the test was passing by accident.",
      "parentUuid": "e0300db1_233c6a57",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "380dfade_e73d363b",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T20:02:17Z",
      "side": 1,
      "message": "Optional: It would be good to add a comment to `aom_get_qmlevel_allintra()` in av1/common/quant_common.h to point out that it is a decreasing function in `qindex`.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6f9ad68_ea77d211",
        "filename": "test/av1_get_qmlevel_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "380dfade_e73d363b",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87b94a46_26942f7b",
        "filename": "test/test.cmake",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T19:48:52Z",
      "side": 1,
      "message": "Nit/optional: Since the functions being tested are named \"aom_get_qmlevel\", I wonder if this file should be named \"aom_get_qmlevel_test.cc\".\n\nAlternative we can omit the prefix to avoid this issue: get_qmlevel_test.cc.",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "843c2e27_8ede667f",
        "filename": "test/test.cmake",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-05T20:36:31Z",
      "side": 1,
      "message": "Yeah, I was trying to make sense of test file prefixes. I named the new file `av1_` because the formulas live in `av1/common`, which coincide with the other tests that operate on primitive data types (txfm, convolve, partition, etc).\n\nLet me know if this is good enough or not. I don\u0027t mind making naming changes if that means the code is headed towards better consistency over the long term.",
      "parentUuid": "87b94a46_26942f7b",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b954ae14_1b5ef757",
        "filename": "test/test.cmake",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-05T21:00:18Z",
      "side": 1,
      "message": "It is fine to leave the file name unchanged.\n\nI probably would omit the prefix (av1_ or aom_) because it doesn\u0027t seem useful. I don\u0027t know if av1_ prefix in the test file names signifies anything.\n\nAnother way to look at this issue: perhaps the two functions should have the av1_ prefix, because they are AV1-specific. If we do that, then the test file name will match the function names  :-)",
      "parentUuid": "843c2e27_8ede667f",
      "revId": "6e2357a83ffe2b642f552c2a89e5e4991187c12e",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}