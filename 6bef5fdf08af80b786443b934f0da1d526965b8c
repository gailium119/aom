{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ee874b59_2e340049",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-11-13T22:28:14Z",
      "side": 1,
      "message": "A general question:\nWhen dist-metric\u003dqm-psnr is turned on for tune\u003dssimulacra2, the proper qm level is also selected, that is why the metric could proveid gains on ssimulacra2.\nIf the qm level is not proper, we can\u0027t get the gains.\n\nIs my understanding correct?",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1eea93ae_a76b7066",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T22:52:33Z",
      "side": 1,
      "message": "There are two kinds of separate gains when using QMs in `tune\u003dssimulacra2`:\n1. When you use the optimized formula from https://aomedia-review.googlesource.com/c/aom/+/194303 alongside `dist-metric\u003dpsnr`\n2. When you use `dist-metric\u003dqm-psnr` on top of 1. instead of `dist-metric\u003dpsnr`\n\nThese two gains add up together. You can only use `dist-metric\u003dqm-psnr` when using QMs, otherwise the code falls back to `dist-metric\u003dpsnr`.",
      "parentUuid": "ee874b59_2e340049",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8761690a_f96f67e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-11-13T23:05:18Z",
      "side": 1,
      "message": "That\u0027s what I meant. 2 show gains on top of 1.\nWhat if only 2 is used?",
      "parentUuid": "1eea93ae_a76b7066",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91f6ad36_c0920daf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T23:20:22Z",
      "side": 1,
      "message": "There won\u0027t be any gain in this case, as the code will detect that no QMs are used, so it falls back to `dist-metric\u003dpsnr`. So your understanding is correct.",
      "parentUuid": "8761690a_f96f67e8",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19a55ffc_4f59cfec",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1058,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-13T20:04:12Z",
      "side": 1,
      "message": "Nit: Delete this blank line? Or also add a blank line after line 1085.",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61caddf1_91ed8893",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1058,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T22:52:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19a55ffc_4f59cfec",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8710edc8_fad7d519",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1078,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-13T20:04:12Z",
      "side": 1,
      "message": "`shift \u003e 0` is always true because `bd` is greater than 8. So we don\u0027t need to use a `? :` expression.\n\nAlternatively, we can use this function for all three bit depths (8, 10, 12). I think this is a good idea seeing how similar the two functions are.",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fb2240a_33e43ac4",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1078,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T22:52:33Z",
      "side": 1,
      "message": "I removed the `shift \u003e 0 ? :` part.\n\nI can consolidate both functions into one. That said, would there be any issues if libaom is built with `CONFIG_AV1_HIGHBITDEPTH\u003d0`, yet it includes this function that can technically work with HBD input? Looking at other parts of the codebase, they try to aggressively prune out passing HBD-specific parameters (like bit depth) from the functions if `CONFIG_AV1_HIGHBITDEPTH\u003d0`.",
      "parentUuid": "8710edc8_fad7d519",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7c8ad03_d82acc93",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1078,
      "author": {
        "id": 26338
      },
      "writtenOn": "2024-11-14T10:56:06Z",
      "side": 1,
      "message": "Can\u0027t comment on the HIGHBITDEPTH practices in AOM, but I also would prefer to see the two functions merged.\nIt also wouldn\u0027t be too hard to ifdef-out the bitdepth parameter, defining shift+rounding, and adjusting the error afterwards when not-HBD, though.",
      "parentUuid": "4fb2240a_33e43ac4",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d66684_8273ac87",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1095,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-13T20:04:12Z",
      "side": 1,
      "message": "This condition cannot be false unless there is an overflow. Are you asserting overflow did not happen?",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57365e76_b88e2743",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1095,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T22:52:33Z",
      "side": 1,
      "message": "Correct. It\u0027s a check where if the overflow were to happen, and the compiler treats integer overflows as wrapping around to negative numbers, this assertion would trigger.",
      "parentUuid": "b4d66684_8273ac87",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa5003f3_dacebd1e",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1097,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-13T20:04:12Z",
      "side": 1,
      "message": "Could you explain why we need to divide by 16 (right-shift by 4) for 10 bits?",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3be06f95_6e2727f5",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1097,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T22:52:33Z",
      "side": 1,
      "message": "This part comes from following the pattern in `av1_highbd_block_error()`, but my understanding is that because 10 bit coefficients are 2 bits larger than 8 bit coefficients, and each term (`error` and `sqcoeff`) is squared, you\u0027ll need to shift them by 4 (`2^2`) to normalize them.",
      "parentUuid": "fa5003f3_dacebd1e",
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1a5e0df_425d4ff8",
        "filename": "av1/encoder/tx_search.c",
        "patchSetId": 3
      },
      "lineNbr": 1102,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-11-13T03:27:11Z",
      "side": 1,
      "message": "Luca: I implemented the missing `HBD QM-PSNR` function, which was literally a merge of the `8-bit QM-PSNR` and `HBD PSNR` functions. \n\nI gave it a test by running subset1, and I\u0027m getting gains similar to `8-bit PSNR` -\u003e `8-bit QM-PSNR`. Let me know if there\u0027s anything I might need to address.",
      "range": {
        "startLine": 1071,
        "startChar": 0,
        "endLine": 1102,
        "endChar": 6
      },
      "revId": "6bef5fdf08af80b786443b934f0da1d526965b8c",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}