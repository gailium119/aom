{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7489f805_fe8e4831",
        "filename": "common/args_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-10-18T02:06:20Z",
      "side": 1,
      "message": "I have mixed feelings about this, the API design is a little unfortunate, but none of the examples use this function and `arg_match_helper` takes a `argv` parameter.",
      "revId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c481339_7ded5a65",
        "filename": "common/args_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-10-18T03:53:56Z",
      "side": 1,
      "message": "I agree. I suggest the following alternative, which I think works:\n\n1. Change `arg_init()` to take `struct arg *arg_` as an output parameter and return `int` (1:success, 0:failure).\n\n2. Remove the `arg_init()` call inside `arg_match_helper()`. Remove the `argv` parameter from `arg_match_helper()`.\n\n3. Call `arg_init()` before calling `arg_match_helper()`.",
      "parentUuid": "7489f805_fe8e4831",
      "revId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cad76506_45303bea",
        "filename": "common/args_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-10-19T02:01:53Z",
      "side": 1,
      "message": "\u003e I agree. I suggest the following alternative, which I think works:\n\u003e \n\u003e 1. Change `arg_init()` to take `struct arg *arg_` as an output parameter and return `int` (1:success, 0:failure).\n\u003e \n\u003e 2. Remove the `arg_init()` call inside `arg_match_helper()`. Remove the `argv` parameter from `arg_match_helper()`.\n\u003e \n\u003e 3. Call `arg_init()` before calling `arg_match_helper()`.\n\nI agree, this is a better call structure. I\u0027ll update this change and then port it to libvpx.",
      "parentUuid": "5c481339_7ded5a65",
      "revId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "776f7e40_a6172bee",
        "filename": "common/args_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-10-19T02:35:57Z",
      "side": 1,
      "message": "I looked into this a little bit. This may not be as simple as it seems. For example, we call `arg_match_helper()` in an if-else-if-else-if-...-else chain. Each call assumes `arg.name` is initialized to NULL. So before  returns 0, it needs to reset `arg.name` to NULL for the next `arg_match_helper()` call.\n\nIt doesn\u0027t seem worthwhile to spend too much time on this. If this is taking more than 10 or 20 minutes, I suggest we just submit the current version.",
      "parentUuid": "cad76506_45303bea",
      "revId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36781c27_ff72fa31",
        "filename": "common/args_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 5020
      },
      "writtenOn": "2024-10-22T18:18:23Z",
      "side": 1,
      "message": "\u003e I looked into this a little bit. This may not be as simple as it seems. For example, we call `arg_match_helper()` in an if-else-if-else-if-...-else chain. Each call assumes `arg.name` is initialized to NULL. So before  returns 0, it needs to reset `arg.name` to NULL for the next `arg_match_helper()` call.\n\u003e \n\u003e It doesn\u0027t seem worthwhile to spend too much time on this. If this is taking more than 10 or 20 minutes, I suggest we just submit the current version.\n\nAfter taking a look, the loops all rely on initialization in every iteration. `struct arg` is treated as an output parameter and needs some key elements (`name` and `argv_step` reset). The loops are handling progression through `argv`, `arg` is not keeping the state, though there is an (unused) `arg_next()` function. To keep things simple I\u0027ll land this as is, rather than reworking the argument parsing and loops.",
      "parentUuid": "776f7e40_a6172bee",
      "revId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "ebe5eebe391a365f534d96ce4212d2b5268c0b1a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}