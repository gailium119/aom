{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dc6c3f45_afb83e01",
        "filename": "av1/common/quant_common.h",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-12-04T18:27:56Z",
      "side": 1,
      "message": "Both aom_get_qmlevel_allintra and aom_get_qmlevel_luma_ssimulacra2 are tuned for SSIMULACRA2. What are the difference of them? One is trained from CID22 test set the other is from Daala\u0027s subset1 testset?\n\nWhat are the difference in using them?\nFor users, which one should they use?",
      "range": {
        "startLine": 111,
        "startChar": 18,
        "endLine": 111,
        "endChar": 50
      },
      "fixSuggestions": [
        {
          "fixId": "0a85f97b_97e432e4",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 65,
                "startChar": 0,
                "endLine": 68,
                "endChar": 0
              },
              "replacement": "// QM levels tuned for all intra mode (including still images).\n// This formula was empirically derived by encoding the Daala\u0027s subset1\n// validation testset for each QP/QM tuple, and building a convex hull that\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 77,
                "startChar": 0,
                "endLine": 77,
                "endChar": 0
              },
              "replacement": "// Note: This function is not used in the current AV1 implementation.\n"
            }
          ]
        }
      ],
      "revId": "b3d288a88a7a64579da05aabbd5da174ffbaac26",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "781d295e_6d63413a",
        "filename": "av1/common/quant_common.h",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-12-04T20:23:06Z",
      "side": 1,
      "message": "Great questions.\n\nSo, the original formula `aom_get_qmlevel_allintra()` was indeed tuned for SSIMULACRA2. However, after realizing that using the `aom_get_qmlevel()` formula made zero sense for all intra content in general (due to the increasing vs. decreasing function in qindex nature), we essentially \"promoted\" `aom_get_qmlevel_allintra()` to run in all intra mode (independently of the tuning), if the user enables QMs.\n\nWith this new QM formula however, we\u0027re explicitly altering chroma vs. luma bit ratio distribution, in a way that I can\u0027t guarantee metrics like PSNR YUV or SSIM YUV won\u0027t regress. This means it\u0027s best for us to keep using `aom_get_qmlevel_allintra()` for all intra mode outside the SSIMULACRA 2 tune.\n\nFor reference, a similar case happened with the chroma 444 formula: https://aomedia-review.googlesource.com/c/aom/+/195261.",
      "parentUuid": "dc6c3f45_afb83e01",
      "range": {
        "startLine": 111,
        "startChar": 18,
        "endLine": 111,
        "endChar": 50
      },
      "revId": "b3d288a88a7a64579da05aabbd5da174ffbaac26",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b3d288a88a7a64579da05aabbd5da174ffbaac26",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "b3d288a88a7a64579da05aabbd5da174ffbaac26",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b3d288a88a7a64579da05aabbd5da174ffbaac26",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "b3d288a88a7a64579da05aabbd5da174ffbaac26",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}