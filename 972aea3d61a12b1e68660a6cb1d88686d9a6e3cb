{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9d1a11b6_d85aed06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-10-24T17:41:20Z",
      "side": 1,
      "message": "Thanks for the patch.\nI have a few general questions:\n(1). Does it need to set any command line to enable QM?\n(2). Could you add some description about how the change contributes to the quality gain?",
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ceac8fe_b2676020",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-10-24T19:57:06Z",
      "side": 1,
      "message": "1. `--enable-qm 1 --allintra` will enable this formula. Longer term, the upcoming still-image tune will enable this by default, alongside other improvements.\n2. Sure thing, will do. Right now, SSIMU2 stats are available in the commit description, but I\u0027ll also add the intuition behind the change for subjective quality.",
      "parentUuid": "9d1a11b6_d85aed06",
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b003cfde_dabdac57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-10-24T20:28:34Z",
      "side": 1,
      "message": "Thanks for the description. Just out of curiosity, I am trying to understand the mechanism of the change.\n\nIn the ideal scenario, in order to get higher perceptual quality, the encoder should not only preserve low and mid frequencies, but also high frequency signals. High frequency signals are usually more difficult to compress and therefore consume a large portion of bits under a fixed bit rate budget. Does it mean that this patch shift more bits from high frequency signal to low and mid frequencies under the assumption/observation that the loss in high frequency is less perceivable (at least measured by SSIMULACRA)?\n\nAlso, the gains are higher for high SSIMULACRA scores. Is it contradictory to the intuition that the encoder should preserve more high frequency signals for high quality images?",
      "parentUuid": "6ceac8fe_b2676020",
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d90f17fb_1629c1e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-10-24T23:26:50Z",
      "side": 1,
      "message": "Correct, this patch tries to shift bits towards a more balanced LF/HF frequency allocation. Contrary to the existing QM formula, the proposed one in this CL actually picks *flatter* QMs as QP goes down, which helps the encoder start giving proportionally more bits to high-frequency image features as quality goes up and bit rate budget allows it to do so.\n\nIn my experience (and a few others), the flat QM level (15) tends to start encoding high frequencies before getting low and mid frequencies visually \"good enough\", so you can end up with peculiar artifacts where image features can look like they were run through some sort of \"high-pass\" filter, especially noticeable when encoding pictures with camera noise or grain.\n\nI\u0027ve noticed that AV1\u0027s entropy coding struggles with encoding large random coefficients often present at high-quality QPs, so that likely explains why gains start picking up at high SSIMU2 scores, and the reason why some QM steepness is still beneficial.",
      "parentUuid": "b003cfde_dabdac57",
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cd6cf86_0ac1514d",
        "filename": "av1/common/quant_common.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-10-24T17:41:20Z",
      "side": 1,
      "message": "In general when the code is broken to more than one line, we need braces.",
      "range": {
        "startLine": 67,
        "startChar": 1,
        "endLine": 80,
        "endChar": 17
      },
      "fixSuggestions": [
        {
          "fixId": "5f42d875_8f4c8a77",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 67,
                "startChar": 0,
                "endLine": 68,
                "endChar": 0
              },
              "replacement": "  if (qindex \u003c\u003d 40) {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 69,
                "startChar": 0,
                "endLine": 70,
                "endChar": 0
              },
              "replacement": "  } else if (qindex \u003c\u003d 100) {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 71,
                "startChar": 0,
                "endLine": 72,
                "endChar": 0
              },
              "replacement": "  } else if (qindex \u003c\u003d 160) {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 73,
                "startChar": 0,
                "endLine": 74,
                "endChar": 0
              },
              "replacement": "  } else if (qindex \u003c\u003d 200) {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 75,
                "startChar": 0,
                "endLine": 76,
                "endChar": 0
              },
              "replacement": "  } else if (qindex \u003c\u003d 220) {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 77,
                "startChar": 0,
                "endLine": 78,
                "endChar": 0
              },
              "replacement": "  } else if (qindex \u003c\u003d 240) {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 79,
                "startChar": 0,
                "endLine": 80,
                "endChar": 0
              },
              "replacement": "  } else {\n"
            },
            {
              "path": "av1/common/quant_common.h",
              "range": {
                "startLine": 81,
                "startChar": 0,
                "endLine": 81,
                "endChar": 0
              },
              "replacement": "  }\n"
            }
          ]
        }
      ],
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0646324_8a280d38",
        "filename": "av1/common/quant_common.h",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-10-24T19:57:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cd6cf86_0ac1514d",
      "range": {
        "startLine": 67,
        "startChar": 1,
        "endLine": 80,
        "endChar": 17
      },
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "919cf33b_0caed08b",
        "filename": "av1/encoder/av1_quantize.c",
        "patchSetId": 1
      },
      "lineNbr": 900,
      "author": {
        "id": 6585
      },
      "writtenOn": "2024-10-24T17:41:20Z",
      "side": 1,
      "message": "Nit: can we reverse the if else here? Double negation is generally more difficult to read.\n\nI mean it could be:\nif (is_allintra) {\n...\n} else {\n...\n}\n\nSame for if (!cm-\u003eseq_params-\u003eseparate_uv_delta_q), even though it has been there before this change.And add braces.\n\nThank you.",
      "range": {
        "startLine": 900,
        "startChar": 6,
        "endLine": 900,
        "endChar": 18
      },
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33b65d61_b0ecef4b",
        "filename": "av1/encoder/av1_quantize.c",
        "patchSetId": 1
      },
      "lineNbr": 900,
      "author": {
        "id": 3678645
      },
      "writtenOn": "2024-10-24T19:57:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "919cf33b_0caed08b",
      "range": {
        "startLine": 900,
        "startChar": 6,
        "endLine": 900,
        "endChar": 18
      },
      "revId": "972aea3d61a12b1e68660a6cb1d88686d9a6e3cb",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ]
}