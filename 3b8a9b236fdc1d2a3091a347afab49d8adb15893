{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "99f42811_47764391",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-10-31T19:36:38Z",
      "side": 1,
      "message": "Just curious: why does a huge max_intra_rate avoid setting a high QP on the first frame?",
      "revId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc4c1c3f_320739d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 5190
      },
      "writtenOn": "2024-10-31T21:04:17Z",
      "side": 1,
      "message": "The max_intra_rate for CBR is used to clamp the target_size of the key frame, so larger value allows for larger target_size and hence lower QP.",
      "parentUuid": "99f42811_47764391",
      "revId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bac16e85_408b6423",
        "filename": "test/monochrome_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-10-31T19:36:38Z",
      "side": 1,
      "message": "The default value of AOME_SET_MAX_INTRA_BITRATE_PCT is either 0 (in regular build) or 300 (in realtime-only build).\n\n10000 is a huge value. Should we just set this to 0? Why is 300 not big enough?",
      "revId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ee259a7_d59c9127",
        "filename": "test/monochrome_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 5190
      },
      "writtenOn": "2024-10-31T21:04:17Z",
      "side": 1,
      "message": "300 is too much of a clamp for the target_size and leads to large QP value. Prefer to set it to something (even if big) since we always set it in RTC.",
      "parentUuid": "bac16e85_408b6423",
      "revId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f68bd2d_c41d9e4e",
        "filename": "test/monochrome_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-01T23:55:24Z",
      "side": 1,
      "message": "We need to put lines 199-201 inside `#if CONFIG_AV1_DECODER`, because the `DecompressedFrameHook()` method is only called if that is true.\n\nApply the following patch:\n\n```\ndiff --git a/test/monochrome_test.cc b/test/monochrome_test.cc\nindex 826b68d8e4..78afd4f960 100644\n--- a/test/monochrome_test.cc\n+++ b/test/monochrome_test.cc\n@@ -196,6 +196,7 @@ TEST_P(MonochromeRealtimeTest, TestMonochromeEncoding) {\n   cfg_.rc_buf_optimal_sz \u003d 5000;\n   ASSERT_NO_FATAL_FAILURE(RunLoop(\u0026video));\n \n+#if CONFIG_AV1_DECODER\n   // Check that the chroma planes are equal across all frames\n   std::vector\u003cint\u003e::const_iterator iter \u003d chroma_value_list_.begin();\n   int initial_chroma_value \u003d *iter;\n@@ -203,6 +204,7 @@ TEST_P(MonochromeRealtimeTest, TestMonochromeEncoding) {\n     // Check that all decoded frames have the same constant chroma planes.\n     EXPECT_EQ(*iter, initial_chroma_value);\n   }\n+#endif\n }\n \n #if !CONFIG_REALTIME_ONLY\n```",
      "revId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d66781c_38f6b581",
        "filename": "test/monochrome_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 205,
      "author": {
        "id": 9545
      },
      "writtenOn": "2024-11-04T19:48:13Z",
      "side": 1,
      "message": "Done in https://aomedia-review.googlesource.com/c/aom/+/194621/1..2.",
      "parentUuid": "9f68bd2d_c41d9e4e",
      "revId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "serverId": "e5514cf8-2d6e-3e29-adb4-24cd6dde4bf0"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "3b8a9b236fdc1d2a3091a347afab49d8adb15893",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}